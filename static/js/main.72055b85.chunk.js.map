{"version":3,"sources":["components/Error.js","App.js","reportWebVitals.js","index.js"],"names":["Error","Layout","React","lazy","Marquee","App","state","isLoading","pageData","backgroundClass","handleClick","e","pages","forEach","page","title","target","innerText","setState","blocks","background","replace","initialBackground","slug","window","location","hash","axios","get","then","res","data","catch","error","console","log","this","className","fallback","map","path","render","props","component","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"mxCAQeA,EAND,kBACV,8BACI,+D,iBCEFC,EAASC,IAAMC,MAAK,kBAAM,gCAC1BC,EAAUF,IAAMC,MAAK,kBAAM,sDAmElBE,E,4MA/DbC,MAAQ,CACNC,WAAW,EACXC,SAAU,GACVC,gBAAiB,I,EAenBC,YAAc,SAACC,GAEb,EAAKL,MAAME,SAASI,MAAMC,SAAQ,SAAAC,GAC7BA,EAAKC,QAAUJ,EAAEK,OAAOC,WACzB,EAAKC,SAAS,CAAET,gBAAiBK,EAAKK,OAAO,GAAGC,WAAWC,QAAQ,OAAO,U,EAMhFC,kBAAoB,WAClB,IAAIF,EAAa,GAQjB,OAP4B,IAAzB,EAAKd,MAAMC,WAAsD,KAA/B,EAAKD,MAAMG,iBAC9C,EAAKH,MAAME,SAASI,MAAMC,SAAQ,SAAAC,GAC7BA,EAAKS,OAASC,OAAOC,SAASC,KAAKL,QAAQ,KAAK,MACjDD,EAAaN,EAAKK,OAAO,GAAGC,WAAWC,QAAQ,OAAO,QAIrDD,G,uDA/BT,WAAqB,IAAD,OAClBO,IAAMC,IAAN,+EACGC,MAAK,SAAAC,GACJ,EAAKZ,SAAS,CAAEV,SAAWsB,EAAIC,KAAMxB,WAAY,OAElDyB,OAAM,SAAAC,GACLC,QAAQC,IAAI,QAASF,GAErB,EAAKf,SAAS,CAAEV,SAAWuB,EAAMxB,WAAY,S,oBA0BnD,WAEE,OAAI6B,KAAK9B,MAAMC,UACN,qBAAK8B,UAAU,YAAf,wBAKN,cAAC,IAAD,UACC,qBAAKA,UAAS,oBAAeD,KAAK9B,MAAMG,iBAAmB2B,KAAKd,qBAAhE,SACE,eAAC,WAAD,CAAUgB,SAAU,6CAApB,UACE,cAACrC,EAAD,CAAQ8B,KAAMK,KAAK9B,MAAME,SAASI,MAAOF,YAAa0B,KAAK1B,cACzD,eAAC,IAAD,WACK0B,KAAK9B,MAAME,SAASI,MAAM2B,KAAI,SAAAzB,GAAI,OAAI,cAAC,IAAD,CAAuB0B,KAAI,WAAM1B,EAAKS,MAAQkB,OAAQ,SAACC,GAAD,OAAW,cAACtC,EAAD,2BAAasC,GAAb,IAAoBX,KAAMjB,OAA/EA,EAAKS,SAC5D,cAAC,IAAD,CAAOoB,UAAW3C,kB,GAxDd4C,aCGHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASZ,OACP,cAAC,IAAMa,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.72055b85.chunk.js","sourcesContent":["import React from 'react';\r\n// displays error if visiting page that isn't a Route\r\nconst Error = () => (\r\n    <div>\r\n        <p>Error: Page does not exist!</p>\r\n    </div>\r\n)\r\n\r\nexport default Error;","import React, { Component, Suspense } from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport data from './data/content.json';\nimport './App.css';\nimport Error from './components/Error';\nimport axios from 'axios';\nconst Layout = React.lazy(() => import('./components/LayoutUI/Layout'));\nconst Marquee = React.lazy(() => import('./components/Marquee'));\n\nclass App extends Component {\n\n  state = {\n    isLoading: true,\n    pageData: [],\n    backgroundClass: '', //initial background image\n  }\n\n  componentDidMount() {\n    axios.get(`https://f.v1.n0.cdn.getcloudapp.com/items/3e1W2F0W1s2U2d3R2Z46/content.json`)\n      .then(res => { \n        this.setState({ pageData : res.data, isLoading : false });\n      })\n      .catch(error => {\n        console.log('Error', error);\n        // just in case axios fails to fetch data, log an error and pull data from local json file instead\n        this.setState({ pageData : data, isLoading : false }); \n      })\n  }\n\n  handleClick = (e) => {\n    // change background depending on which page user is on //maybe use map object to map window pathname or innertext with background image?\n    this.state.pageData.pages.forEach(page => {\n      if(page.title === e.target.innerText) {\n        this.setState({ backgroundClass: page.blocks[0].background.replace('.jpg','') }) \n      }\n    })\n  }\n\n  //for initial background render\n  initialBackground = () => {\n    let background = ''\n    if(this.state.isLoading === false && this.state.backgroundClass === '') {\n      this.state.pageData.pages.forEach(page => {\n        if(page.slug === window.location.hash.replace('#/','')) {\n          background = page.blocks[0].background.replace('.jpg','')\n        }\n      })\n    }\n    return background;\n  }\n\n  render() {\n\n    if (this.state.isLoading) {\n      return <div className=\"container\">Loading...</div>;\n    }\n\n    //Use HashRouter to establish 3 routes, one for each page. Pass data for each page in as props\n    return (      \n       <HashRouter>\n        <div className={`container ${this.state.backgroundClass || this.initialBackground()}`}>\n          <Suspense fallback={<div>Loading...</div>}> \n            <Layout data={this.state.pageData.pages} handleClick={this.handleClick} />\n              <Switch>\n                  {this.state.pageData.pages.map(page => <Route key={page.slug} path={`/${page.slug}`} render={(props) => <Marquee {...props} data={page} />} />  )}\n              <Route component={Error}/>\n            </Switch>\n           </Suspense>\n        </div> \n      </HashRouter>\n    );\n  }\n}\n \nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}